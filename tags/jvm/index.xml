<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on Rabbit&amp;Carrot</title>
    <link>/blog/tags/jvm/</link>
    <description>Recent content in JVM on Rabbit&amp;Carrot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 19 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/blog/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JVM调优笔记-JVM调优攻略</title>
      <link>/blog/post/tech/jvm%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0-jvm%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/post/tech/jvm%E8%B0%83%E4%BC%98%E7%AC%94%E8%AE%B0-jvm%E8%B0%83%E4%BC%98%E6%94%BB%E7%95%A5/</guid>
      <description>在Java虚拟机的参数中，有3种表示方法（出自：http://www.cnblogs.com/wenfeng762/archive/2011/08/14/2137810.html），用ps -ef |grep “java”命令，可以得到当前Java进程的所有启动参数和配置参数：
 标准参数（-），所有的JVM实现都必须实现这些参数的功能，而且向后兼容； 非标准参数（-X），默认jvm实现这些参数的功能，但是并不保证所有jvm实现都满足，且不保证向后兼容； 非Stable参数（-XX），此类参数各个jvm实现会有所不同，将来可能会随时取消，需要慎重使用（但是，这些参数往往是非常有用的）；  （额外的，-DpropertyName=“value”的形式定义了一些全局属性值，下面有介绍。） 本文只重点介绍一些重要和常用的参数，如果想了解全部参数，可以参考下面的文章： 《Java HotSpot VM Options》 《JVM启动参数大全》
标准参数 其实标准参数是用过Java的人都最熟悉的，就是你在运行java命令时后面加上的参数，如java -version, java -jar 等，输入命令java -help或java -?就能获得当前机器所有java的标准参数列表。
-client 设置jvm使用client模式，这是一般在pc机器上使用的模式，启动很快，但性能和内存管理效率并不高；多用于桌面应用；
-server    启动模式 新生代GC方式 旧生代和持久代GC的方式     client 串行 串行   server 并行 并发    -classpath / -cp JVM加载和搜索文件的目录路径，多个路径用;分隔。注意，如果使用了-classpath，JVM就不会再搜索环境变量中定义的CLASSPATH路径。 JVM搜索路径的顺序为：
 先搜索JVM自带的jar或zip包（Bootstrat，搜索路径可以用System.getProperty(“sun.boot.class.path”)获得）； 搜索JRE_HOME/lib/ext下的jar包（Extension，搜索路径可以用System.getProperty(“java.ext.dirs”)获得）； 搜索用户自定义目录，顺序为：当前目录（.），CLASSPATH，-cp；（搜索路径用System.getProperty(“java.class.path”)获得）  -DpropertyName=value 定义系统的全局属性值，如配置文件地址等，如果value有空格，可以用-Dname=”space string”这样的形式来定义，用System.getProperty(“propertyName”)可以获得这些定义的属性值，在代码中也可以用System.setProperty(“propertyName”,”value”)的形式来定义属性。
-verbose -verbose:class 输出jvm载入类的相关信息，当jvm报告说找不到类或者类冲突时可此进行诊断。
-verbose:gc 输出每次GC的相关情况，后面会有更详细的介绍。
-verbose:jni 输出native方法调用的相关情况，一般用于诊断jni调用错误信息。
非标准参数 非标准参数，是在标准参数的基础上进行扩展的参数，输入“java -X”命令，能够获得当前JVM支持的所有非标准参数列表（你会发现，其实并不多哦）。 -Xmn 新生代内存大小的最大值，包括E区和两个S区的总和,大小建议为整个堆栈的3/8，使用方法如：-Xmn65535，-Xmn1024k，-Xmn512m，-Xmn1g (-Xms,-Xmx也是种写法) -Xmn只能使用在JDK1.</description>
    </item>
    
  </channel>
</rss>